#+STARTUP: showall
#+REVEAL_ROOT: http://cdn.jsdelivr.net/reveal.js/2.5.0/
#+TITLE: scikit-fmm
#+AUTHOR: Jason Furtney
#+EMAIL: @jkfurtney
#+REVEAL_EXTRA_CSS: ss.css
#+OPTIONS: toc:nil num:nil reveal_mathjax:t

* Knowing your boundaries


...and bootstrapping a SciPy-related community project

[[./sol.png]]

#+REVEAL: split

Inspired by a lightning talk by Gael Varoquaux

[[./gv.png]]

Bootstrapping a SciPy-related community project

https://gist.github.com/GaelVaroquaux/1433151

#+REVEAL: split

[[./bound.png]]

Stationary solutions to the Eikonal equation

$F(x) |\nabla T(x)| = 1$

https://en.wikipedia.org/wiki/Eikonal_equation

#+REVEAL: split

[[./sol.png]]

#+REVEAL: split

[[./point.png]]


** Implicit surface representation

Represent a surface as the zero contour of a function in one
dimensions higher.

#+REVEAL: split

[[./Level_set_method.jpg]]

(wikipedia)

#+REVEAL: split

[[./grid_with_zeroc.png]]

(from Sethian, 2006)

** Fast Marching Method

- The fast marching method (fmm) is an O(N Log(N)) algorithm for
  solving boundary value problems of the Eikonal equation.

- Created in the 1990s at MIT by James Sethian and Stanley Osher.

- =scikit-fmm= is a Python/NumPy extension module which implements the fast
  marching method.

#+REVEAL: split

[[./grid_with_zeroc.png]]

(from Sethian, 2006)

#+REVEAL: split

[[./narrow_band.png]]

(from Sethian, 2006)

#+REVEAL: split

- Continuous analogy of Dijkstra's algorithm.
- https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm

#+REVEAL: split

#+BEGIN_SRC python
>>> from skfmm import distance
>>> distance([1, -1])
#+END_SRC

#+BEGIN_SRC python
array([ 0.5, -0.5])
#+END_SRC

- =numpy= arrays are used as input and output.

- The input array can be of 1, 2, 3 or higher dimensions and can be
  masked.


#+REVEAL: split

#+BEGIN_SRC python
>>> distance([[ 1,  1,  1,  1,  1],
              [ 1,  1, -1,  1,  1],
              [ 1, -1, -1, -1,  1],
              [ 1,  1, -1,  1,  1],
              [ 1,  1,  1,  1,  1]])
#+END_SRC

#+BEGIN_SRC python
array([[ 1.79,  1.11,  0.50,  1.11,  1.79],
       [ 1.11,  0.35, -0.35,  0.35,  1.11],
       [ 0.50, -0.35, -1.11, -0.35,  0.50],
       [ 1.11,  0.35, -0.35,  0.35,  1.11],
       [ 1.79,  1.11,  0.50,  1.11,  1.79]])
#+END_SRC

#+REVEAL: split
[[./doc0.png]]

#+REVEAL: split
[[./doc1.png]]

#+REVEAL: split
[[./doc2.png]]

#+REVEAL: split
[[./doc3.png]]


* Applications

#+REVEAL: split

[[./artery.png]]

https://math.berkeley.edu/~sethian/2006/Applications/Medical_Imaging/artery.html

#+REVEAL: split

[[./ms_paint.jpg]]

#+REVEAL: split

- Path finding
- Solving mazes
- Anthropology

#+REVEAL: split

[[./AmericaSRTM-NorthLarge-picasa.jpg]]

#+REVEAL: split

[[./rn.png]]

https://math.berkeley.edu/~sethian/2006/Applications/Robotics/robotics.html

** Level Set method

FMM is the foundation of the Level-Set method.

Modeling moving boundaries in physical problems.

[[./water-droplet-585x298.jpg]]

#+REVEAL: split

[[./lsmon.png]]

* Community driven

[[./gv.png]]

Bootstrapping a SciPy-related community project

https://gist.github.com/GaelVaroquaux/1433151

#+REVEAL: split

- Released in February 2012

- 9 contributors

- 7 versions

- 92 commits

- 1,744 lines of code (364 Python, 1,380 C++)

- 731 lines of tests

- 1 Stack Overflow question/answer

** Things that worked well for me

- Github organization, not a personal github page

  - https://github.com/scikit-fmm/scikit-fmm

- Register on PyPI https://pypi.python.org/pypi/scikit-fmm

- Try to refrain from personal ownership of the project

#+REVEAL: split

- Start simple. I started with one function

- Minimal, well-documented, application-agnostic library

#+REVEAL: split

- Quickly address issues and release updates often.

- Mailing list, Github issues and pull requests.

- BSD style license. Similar to the PSF license.

#+REVEAL: split

- Thank people and add them to a CONTRIBUTORS.txt file

#+BEGIN_SRC python
Jason Furtney
Chris Richardson
Luigi Costalli
Daniel Wheeler
Jan Margeta
Geordie McBain
Eugene Prilepin
J A Kirkham
#+END_SRC


** Things I should do better

- Binary packaging

- More application specific examples

- Build bot, Travis CI

- Announce updates on the scipy-dev mailing list

- Technical:

    -  Second order initialization (n-dimensional cubic interpolation
       and solving systems of polynomials.)

    -  Solutions in triangular grids and manifold surfaces.

#+REVEAL: split

Thank you
